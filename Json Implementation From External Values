using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Web.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.IO;
using System.Net;
using System.Text;


public partial class User_WithdrawAmount :  System.Web.UI.Page
{
    SqlConnection con = new SqlConnection(WebConfigurationManager.ConnectionStrings["EncashConnectionString"].ToString());
    protected void Page_Load(object sender, EventArgs e)
    {
        getAccountBal();
    }

    // Getting user Account Balance
    void getAccountBal()
    {
        string str = "select * from UserRegistration where UName = '" + Session["Login"].ToString() + "'";
        SqlCommand cmd = new SqlCommand(str, con);
        con.Open();
        SqlDataReader dr;
        dr = cmd.ExecuteReader();
        while (dr.Read())
        {

            Cache["AckBal"] = dr["RippleBalance"].ToString();
            Cache["dt"] = dr["DestinationTag"].ToString();
        }
        con.Close();

        Label1.Text = Cache["AckBal"].ToString() + "\tXRP";



    }


    protected void Button1_Click(object sender, EventArgs e)
    {
        //Checking Destination Tag first


        SqlCommand cmd = new SqlCommand("select DestinationTag from UserRegistration where DestinationTag like '" + TextBox2.Text + "' ;");
        cmd.Parameters.AddWithValue("DestinationTag", TextBox2.Text);
        cmd.Connection = con;
        con.Open();

        DataSet ds = new DataSet();
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        da.Fill(ds);
        con.Close();

        bool loginSuccessful = ((ds.Tables.Count > 0) && (ds.Tables[0].Rows.Count > 0));

        if (loginSuccessful)
        {
            Label2.Text = "You cannot Insert this Destination Tag Please Try Another";
        }
        else
        {
            //Client Account Balance Check
            if (float.Parse(Cache["AckBal"].ToString()) < float.Parse(TextBox1.Text))
            {
                Label2.Text = "You cannot enter value Greater than your account balance";
            }
            else
            {
                // Account Check If Exist or Not
                var acchck = AccountCheck();
                dynamic data = JObject.Parse(acchck.ToString());

                if (data.result.error == "actMalformed")
                {

                    Label2.Text = "This is not a Valid Account";

                }
                else if (data.result.error_message == "Account not found.")
                {
                    Label2.Text = "Account Not Found.";
                }
                else if (data.result.account_data.Account == TextBox3.Text)
                {
                    //company Account Balance Check if Holding Or Not

                    var cobalcheck = CoBalCheck();
                    dynamic data11 = JObject.Parse(cobalcheck.ToString());
                    string par = data11.result.account_data.Balance;


                    par = par.Remove(par.Length - 6); // Company Wallet Balance in Par

                    //Label3.Text = par;

                    if (int.Parse(par) < float.Parse(TextBox1.Text))  // if company waller wallet is less than 100 ripple
                    {
                        Label2.Text = "Please contact Administrator for Withdraw fund";
                    }
                    else
                    {


                        //Finally Transfer the Balance.
                        var request = InvokeMethod();



                        dynamic data2 = JObject.Parse(request.ToString());

                        /*  // Response.Write("\nAccount : - \t");
                         //  Response.Write("\r\n");
                         //   Response.Write(data.result.tx_json.Account);
                            Response.Write("\nAmount : - \t");
                            Response.Write("\r\n");
                            Response.Write(data.result.tx_json.Amount);
                            Response.Write("\nDestination Account : - \t");
                            Response.Write("\r\n");
                            Response.Write(data.result.tx_json.Destination);
                            Response.Write("\nDestination Tag : - \t");
                            Response.Write("\r\n");
                            Response.Write(data.result.tx_json.DestinationTag);
                            Response.Write("\nFee : - \t");
                            Response.Write(data.result.tx_json.Fee);*/

                        if (data2.result.engine_result == "tesSUCCESS")
                        {
                            DeductAccountBal();
                            getAccountBal();
                            TextBox1.Text = "";
                            TextBox2.Text = "";
                            TextBox3.Text = "";
                            Label2.Text = "Amount Successfully Transfered...!!!";
                            Label3.Text = data2.result.engine_result;
                        }
                        else
                        {
                            Label2.Text = "Amount Not Transfered Please Contact Admin...!!!";
                            Label3.Text = data2.result.engine_result;
                        }

                    }
                }


            }
        }

        
    }

    public JObject CoBalCheck()
    {
         HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("http://s1.ripple.com:51234/");
       // HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("https://s.altnet.rippletest.net:51234/");

        webRequest.ContentType = "application/json";
        webRequest.Method = "POST";

       

        // Co. Wallet Bal Checking
        string json = @"
            {

    'method': 'account_info',
    'params': [
        {
            'account': 'rLRiVSAPfnmDoQe8y6VM57XHwkJu9VPnHS',
            'strict': true,
            'ledger_index': 'current',
            'queue': true
        }
    ]

            }";


        JObject joe = JObject.Parse(json);
        string s = JsonConvert.SerializeObject(joe);



        byte[] byteArray = Encoding.UTF8.GetBytes(s);
        webRequest.ContentLength = byteArray.Length;

        try
        {
            using (Stream dataStream = webRequest.GetRequestStream())
            {
                dataStream.Write(byteArray, 0, byteArray.Length);
            }
        }
        catch (WebException we)
        {

            throw we;
        }

        WebResponse webResponse = null;
        try
        {
            using (webResponse = webRequest.GetResponse())
            {
                using (Stream str = webResponse.GetResponseStream())
                {
                    using (StreamReader sr = new StreamReader(str))
                    {
                        return JsonConvert.DeserializeObject<JObject>(sr.ReadToEnd());
                    }
                }
            }
        }
        catch (WebException webex)
        {

            using (Stream str = webex.Response.GetResponseStream())
            {
                using (StreamReader sr = new StreamReader(str))
                {
                    var tempRet = JsonConvert.DeserializeObject<JObject>(sr.ReadToEnd());
                    return tempRet;
                }
            }

        }
        catch (Exception)
        {

            throw;
        }
    }

        // Deduct Account Balance
        void DeductAccountBal()
        {
        float bal = float.Parse(Cache["AckBal"].ToString()) - float.Parse(TextBox1.Text);
        string str = "update UserRegistration set RippleBalance = '" + bal.ToString() + "' where UName = '" + Session["Login"].ToString() + "'";
        SqlCommand cmd = new SqlCommand(str, con);
        con.Open();
        cmd.ExecuteNonQuery();
        con.Close();
        }

        //// Account Check

        public JObject AccountCheck()
        {
             HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("http://s1.ripple.com:51234/");
           // HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("https://s.altnet.rippletest.net:51234/");

            webRequest.ContentType = "application/json";
            webRequest.Method = "POST";

            string extaccount = TextBox3.Text;

            string json = @"
            {

    'method': 'account_info',
    'params': [
        {
            'account': '" + extaccount + @"',
            'strict': true,
            'ledger_index': 'current',
            'queue': true
        }
    ]

            }";


            JObject joe = JObject.Parse(json);
            string s = JsonConvert.SerializeObject(joe);



            byte[] byteArray = Encoding.UTF8.GetBytes(s);
            webRequest.ContentLength = byteArray.Length;

            try
            {
                using (Stream dataStream = webRequest.GetRequestStream())
                {
                    dataStream.Write(byteArray, 0, byteArray.Length);
                }
            }
            catch (WebException we)
            {

                throw we;
            }

            WebResponse webResponse = null;
            try
            {
                using (webResponse = webRequest.GetResponse())
                {
                    using (Stream str = webResponse.GetResponseStream())
                    {
                        using (StreamReader sr = new StreamReader(str))
                        {
                            return JsonConvert.DeserializeObject<JObject>(sr.ReadToEnd());
                        }
                    }
                }
            }
            catch (WebException webex)
            {

                using (Stream str = webex.Response.GetResponseStream())
                {
                    using (StreamReader sr = new StreamReader(str))
                    {
                        var tempRet = JsonConvert.DeserializeObject<JObject>(sr.ReadToEnd());
                        return tempRet;
                    }
                }

            }
            catch (Exception)
            {

                throw;
            }

        }



        // Ripple Transfer

        public JObject InvokeMethod()
        {
             HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("http://s1.ripple.com:51234/");
           // HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create("https://s.altnet.rippletest.net:51234/");

            webRequest.ContentType = "application/json";
            webRequest.Method = "POST";

            string extaccount = TextBox3.Text;
            string dt = TextBox2.Text;
            string Uamnt = TextBox1.Text;
            string Exzero = "000000";


            string amnt = Uamnt + Exzero;
            string json = @"
            {
    'method': 'submit',
    'params': [{
        'secret': 'shHsxDAx73ZTyFGpVxMJFaFnbGJAS',
        'tx_json': {
            'Account': 'rLRiVSAPfnmDoQe8y6VM57XHwkJu9VPnHS',
            'TransactionType': 'PaymentChannelCreate',
            'Amount': '" + amnt + @"',
            'Destination': '" + extaccount + @"',
            'SettleDelay': 86400,
            'PublicKey': '023693F15967AE357D0327974AD46FE3C127113B1110D6044FD41E723689F81CC6',
            'DestinationTag': " + dt + @",
        },
        'fee_mult_max': 1000
    }]

            }";


            JObject joe = JObject.Parse(json);
            string s = JsonConvert.SerializeObject(joe);



            byte[] byteArray = Encoding.UTF8.GetBytes(s);
            webRequest.ContentLength = byteArray.Length;

            try
            {
                using (Stream dataStream = webRequest.GetRequestStream())
                {
                    dataStream.Write(byteArray, 0, byteArray.Length);
                }
            }
            catch (WebException we)
            {

                throw we;
            }

            WebResponse webResponse = null;
            try
            {
                using (webResponse = webRequest.GetResponse())
                {
                    using (Stream str = webResponse.GetResponseStream())
                    {
                        using (StreamReader sr = new StreamReader(str))
                        {
                            return JsonConvert.DeserializeObject<JObject>(sr.ReadToEnd());
                        }
                    }
                }
            }
            catch (WebException webex)
            {

                using (Stream str = webex.Response.GetResponseStream())
                {
                    using (StreamReader sr = new StreamReader(str))
                    {
                        var tempRet = JsonConvert.DeserializeObject<JObject>(sr.ReadToEnd());
                        return tempRet;
                    }
                }

            }
            catch (Exception)
            {

                throw;
            }

        }



    
}
